data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
# Set a number of 'empty bar'
empty_bar=10
# Add lines to the initial dataset
to_add = matrix(NA, empty_bar, ncol(data))
colnames(to_add) = colnames(data)
data=rbind(data, to_add)
data$id=seq(1, nrow(data))
# Get the name and the y position of each label
label_data=data
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# Make the plot
p = ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", fill=alpha("green", 0.3)) +
ylim(-100,120) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )
p
# library
library(tidyverse)
# Create dataset
data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
# Set a number of 'empty bar'
empty_bar=10
# Add lines to the initial dataset
to_add = matrix(NA, empty_bar, ncol(data))
colnames(to_add) = colnames(data)
data=rbind(data, to_add)
data$id=seq(1, nrow(data))
# Get the name and the y position of each label
label_data=data
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# Make the plot
p = ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(stat="identity", fill=alpha("green", 0.3)) +
ylim(-100,120) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )
p
library(tidyverse)
library(maps)
library(geosphere)
install.packages('maps')
install.packages('geosphere')
library(tidyverse)
library(maps)
library(geosphere)
par(mar=c(0,0,0,0))
map('world',col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )
Buenos_aires=c(-58,-34)
Paris=c(2,49)
Melbourne=c(145,-38)
data=rbind(Buenos_aires, Paris, Melbourne) %>% as.data.frame()
colnames(data)=c("long","lat")
points(x=data$long, y=data$lat, col="slateblue", cex=3, pch=20)
# Connection between Buenos Aires and Paris
inter <- gcIntermediate(Paris,  Buenos_aires, n=50, addStartEnd=TRUE, breakAtDateLine=F)
lines(inter, col="slateblue", lwd=2)
# Between Paris and Melbourne
inter <- gcIntermediate(Melbourne,  Paris, n=50, addStartEnd=TRUE, breakAtDateLine=F)
lines(inter, col="slateblue", lwd=2)
plot_my_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, ...){
inter <- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F)
inter=data.frame(inter)
diff_of_lon=abs(dep_lon) + abs(arr_lon)
if(diff_of_lon > 180){
lines(subset(inter, lon>=0), ...)
lines(subset(inter, lon<0), ...)
}else{
lines(inter, ...)
}
}
map('world',col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )
points(x=data$long, y=data$lat, col="slateblue", cex=3, pch=20)
plot_my_connection(Paris[1], Paris[2], Melbourne[1], Melbourne[2], col="slateblue", lwd=2)
plot_my_connection(Buenos_aires[1], Buenos_aires[2], Melbourne[1], Melbourne[2], col="slateblue", lwd=2)
plot_my_connection(Buenos_aires[1], Buenos_aires[2], Paris[1], Paris[2], col="slateblue", lwd=2)
data=rbind(
Buenos_aires=c(-58,-34),
Paris=c(2,49),
Melbourne=c(145,-38),
Saint.Petersburg=c(30.32, 59.93),
Abidjan=c(-4.03, 5.33),
Montreal=c(-73.57, 45.52),
Nairobi=c(36.82, -1.29),
Salvador=c(-38.5, -12.97)
)  %>% as.data.frame()
colnames(data)=c("long","lat")
all_pairs=cbind(t(combn(data$long, 2)), t(combn(data$lat, 2))) %>% as.data.frame()
colnames(all_pairs)=c("long1","long2","lat1","lat2")
# background map
par(mar=c(0,0,0,0))
map('world',col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )
# add every connections:
for(i in 1:nrow(all_pairs)){
plot_my_connection(all_pairs$long1[i], all_pairs$lat1[i], all_pairs$long2[i], all_pairs$lat2[i], col="skyblue", lwd=1)
}
# add points and names of cities
points(x=data$long, y=data$lat, col="slateblue", cex=2, pch=20)
text(rownames(data), x=data$long, y=data$lat,  col="slateblue", cex=1, pos=4)
# A function that keeps the good part of the great circle, by Jeff Leek:
getGreatCircle = function(userLL,relationLL){
tmpCircle = greatCircle(userLL,relationLL, n=200)
start = which.min(abs(tmpCircle[,1] - data.frame(userLL)[1,1]))
end = which.min(abs(tmpCircle[,1] - relationLL[1]))
greatC = tmpCircle[start:end,]
return(greatC)
}
# map 3 connections:
map('world',col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )
great=getGreatCircle(Paris, Melbourne)
lines(great, col="skyblue", lwd=2)
great=getGreatCircle(Buenos_aires, Melbourne)
lines(great, col="skyblue", lwd=2)
great=getGreatCircle(Paris, Buenos_aires)
lines(great, col="skyblue", lwd=2)
points(x=data$long, y=data$lat, col="slateblue", cex=3, pch=20)
text(rownames(data), x=data$long, y=data$lat,  col="slateblue", cex=1, pos=4)
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
bookdown:::serve_book()
blogdown:::new_post_addin()
# data: one value per group
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
# mpg: several values per group
mpg
# Reorder following the value of another column:
data %>%
mutate(name = fct_reorder(name, val)) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
# Reverse side
data %>%
mutate(name = fct_reorder(name, desc(val))) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
# Using median
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# Using number of observation per group
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
blogdown::serve_site()
# Using median mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# Using number of observation per group mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
library(xml2)  #加载包
library(rvest)  #加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding="utf-8") #读取数据，规定编码
position<-web %>% html_nodes("div.event_box div p") %>% html_text()
print(point)
library(xml2)#加载包
install.packages('xml2')
install.packages("xml2")
install.packages("rvest")
library(xml2)  #加载包
library(rvest)  #加载包
url<-'http://www.gov.cn/zhaunti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding="utf-8") #读取数据，规定编码
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding="utf-8") #读取数据，规定编码
position<-web %>% html_nodes("div.event_box div p") %>% html_text()
library(xml2)  #加载包
library(rvest)  #加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding="utf-8") #读取数据，规定编码
position<-web %>% html_nodes("div.event_box div p") %>% html_text()
print(point)
install.packages("xml2")
install.packages("xml2")
install.packages("rvest")
install.packages("rvest")
library(xml2)  #加载包
library(rvest)  #加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding="utf-8") #读取数据，规定编码
position<-web %>% html_nodes("div.event_box div p") %>% html_text()
library(jiebaRD)  #加载包
install.packages("jieba")
install.packages("jiebaRD")
library(jiebaRD)  #加载包
library(jiebaR) #加载包
install.packages('jiebaR')
library(jiebaR) #加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(position,engine_s)#分词
f<-freq(seg) #统计词频
f<-f[order(f[2],decreasing=TRUE),] #根据词频降序排列
install.packages('yaml')
install.packages("yaml")
install.packages("yaml")
install.packages('yam1')
install.packages('wordcloud2')
install.packages("wordcloud2")
library(yaml)# 加载包
library(wordcloud2)#加载包
f1<-f[1:100,]     #提取前100词
wordcloud2(f1, size = 0.8 ,shape='circle')    #形状设置为圆形
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
library(xml2)  #加载包
library(rvest)  #加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding="utf-8") #读取数据，规定编码
position<-web %>% html_nodes("div.event_box div p") %>% html_text()
library(jiebaRD)  #加载包
library(jiebaR) #加载包
engine_s<-worker(stop_word = "E:\\Source\\R\\firstScrapy\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(position,engine_s)#分词
f<-freq(seg) #统计词频
f<-f[order(f[2],decreasing=TRUE),] #根据词频降序排列
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
f<-freq(seg)#统计词频
f<-f[order(f[2],decreasing = TRUE),]#根据词频降序排列
print(f)
library(yaml)#加载包
library(wordcloud2)#加载包
f1<-f[1:100,]#提取前100词
wordcloud2(f1,size = 0.5,shape='star')#形状设置为星形
blogdown::serve_site()
blogdown::serve_site()
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
f<-freq(seg)#统计词频
f<-f[order(f[2],decreasing = TRUE),]#根据词频降序排列
library(yaml)#加载包
library(wordcloud2)#加载包
f1<-f[1:100,]#提取前100词
wordcloud2(f1,size = 0.5,shape='star')#形状设置为星形
library(png)
logo <- readPNG('C:/dingxiaoyu/star.png')
install.packages("png")
library(png)
logo <- readPNG('C:/dingxiaoyu/star.png')
logo <- readPNG('C:/dingxiaoyu/star.png')
library(png)
> logo <- readPNG('C:/dingxiaoyu/star.png')
library(png)
logo <- readPNG('C:/dingxiaoyu/star.png')
logo <- readPNG('C:\\dingxiaoyu\\star.png')
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
f<-freq(seg)#统计词频
f<-f[order(f[2],decreasing = TRUE),]#根据词频降序排列
library(yaml)#加载包
library(wordcloud2)#加载包
f1<-f[1:100,]#提取前100词
wordcloud2(f1,size = 0.5,shape='star')#形状设置为星形
blogdown::serve_site()
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
f<-freq(seg)#统计词频
f<-f[order(f[2],decreasing = TRUE),]#根据词频降序排列
library(yaml)#加载包
library(wordcloud2)#加载包
f1<-f[1:100,]#提取前100词
wordcloud2(f1,size = 0.5,shape='star')#形状设置为星形
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
library(xml2)#加载包
library(rvest)#加载包
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")#读取数据，规定编码
library(jiebaRD)#加载包
library(jiebaR)#加载包
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")#初始化分词引擎并加载停用词。
seg<-segment(Position,engine_s)#分词
library(xml2)
library(rvest)
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")
library(jiebaRD)
library(jiebaR)
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")
seg<-segment(Position,engine_s)
library(xml2)
library(rvest)
url<-'http://www.gov.cn/zhuanti/2018lh/2018zfgzbg/zfgzbg.htm'
web<-read_html(url,encoding = "utf-8")
library(jiebaRD)
library(jiebaR)
engine_s<-worker(stop_word = "C:\\dingxiaoyu\\stopwords.txt")
seg<-segment(Position,engine_s)
f<-freq(seg)
f<-f[order(f[2],decreasing = TRUE),]
library(yaml)
library(wordcloud2)
f1<-f[1:100,]
wordcloud2(f1,size = 0.5,shape='star')
# Using median
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
install.packages('mpg')
# Using median
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
# library & data
library(ggplot2)
data=data.frame(x=rnorm(100))
# Basic plot with title
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal()
# title on several lines
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue \nHistogram") +
theme_minimal()
# Custom title appearance
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal() +
theme(
plot.title=element_text(family='', face='bold', colour='purple', size=26)
)
# Adjust the position of title
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle("With title on the right") +
theme_minimal() +
theme(
plot.title=element_text( hjust=1, vjust=0.5, face='bold')
)
# Custom a few word of the title only:
my_title <- expression(paste("A ", italic(bold("blue")), " histogram"))
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle(my_title) +
theme_minimal()
# library & data
library(ggplot2)
data=data.frame(x=rnorm(100))
# Basic plot with title
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal()
# title on several lines
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue \nHistogram") +
theme_minimal()
# Custom title appearance
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal() +
theme(
plot.title=element_text(family='', face='bold', colour='purple', size=26)
)
# Adjust the position of title
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle("With title on the right") +
theme_minimal() +
theme(
plot.title=element_text( hjust=1, vjust=0.5, face='bold')
)
# Custom a few word of the title only:
my_title <- expression(paste("A ", italic(bold("blue")), " histogram"))
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle(my_title) +
theme_minimal()
blogdown::serve_site()
blogdown:::new_post_addin()
# library & data
library(ggplot2)
data=data.frame(x=rnorm(100))
# Basic plot with title
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal()
# title on several lines
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue \nHistogram") +
theme_minimal()
# Custom title appearance
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal() +
theme(
plot.title=element_text(family='', face='bold', colour='purple', size=26)
)
# Adjust the position of title
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle("With title on the right") +
theme_minimal() +
theme(
plot.title=element_text( hjust=1, vjust=0.5, face='bold')
)
# Custom a few word of the title only:
my_title <- expression(paste("A ", italic(bold("blue")), " histogram"))
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle(my_title) +
theme_minimal()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
